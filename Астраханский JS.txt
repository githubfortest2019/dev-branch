var line = 1;
var circuitLine1 = 1;
var circuitLine2 = 1;
var circuitLine3 = 1;
var checkDevice = [];
var $buttonShowModal = $('#buttonShowModal');
var $selectPeriod = $('#selectPeriod');
var countWindows = 0;
var listdev = [];

var chart;
var chartData = [];
var chartDialog = [];
var chartDataDialog = [];

$selectPeriod.val("1").trigger('change');
var period = $selectPeriod.val();
var listperiod = [];

$daterange = $('#daterange');
var dateStart = "";
var dateEnd = "";

var d = new Date();
var dateCurrent = d.getFullYear() + "-" + (d.getMonth()+1) + "-" + d.getDate();

$daterange.daterangepicker({
    "startDate": "2018-09-14",
    "locale": {
        "format": "YYYY-MM-DD",
        "separator": " | ",
        "applyLabel": "Принять",
        "cancelLabel": "Отмена",
        "fromLabel": "From",
        "toLabel": "To",
        "customRangeLabel": "Custom",
        "daysOfWeek": [
            "Вс",
            "Пн",
            "Вт",
            "Ср",
            "Чт",
            "Пт",
            "Сб"
        ],
        "monthNames": [
            "Январь",
            "Февраль",
            "Март",
            "Апрель",
            "Май",
            "Июнь",
            "Июль",
            "Август",
            "Сентябрь",
            "Октябрь",
            "Ноябрь",
            "Декабрь"
        ],
        "firstDay": 1,
    }
}).on("change", function() {
    $.notifyClose();
    dateStart = $daterange.data('daterangepicker').startDate.format('YYYY-MM-DD');
    dateEnd = $daterange.data('daterangepicker').endDate.format('YYYY-MM-DD');
    period = $selectPeriod.val();
    loadChart("graph", checkDevice, period, dateStart, dateEnd);
});

$selectPeriod.select2().on("select2:select", function (e) {
    $.notifyClose();
    dateStart = $daterange.data('daterangepicker').startDate.format('YYYY-MM-DD');
    dateEnd = $daterange.data('daterangepicker').endDate.format('YYYY-MM-DD');
    period = $selectPeriod.val();
    loadChart("graph", checkDevice, period, dateStart, dateEnd);
});

loadCheckBox("#Circuit1Line1", line, circuitLine1);

$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    var target = $(e.target).attr("href");
    if (target == "#Line1") {
        line = 1;
    }
    if (target == "#Line2") {
        line = 2;
        if (circuitLine2 == 1) {
            loadCheckBox("#Circuit1Line2", line, circuitLine2);
        }
        else if (circuitLine2 == 2) {
            loadCheckBox("#Circuit2Line2", line, circuitLine2);
        }
        else if (circuitLine2 == 3) {
            loadCheckBox("#Circuit3Line2", line, circuitLine2);
        }
        else if (circuitLine2 == 4) {
            loadCheckBox("#Circuit4Line2", line, circuitLine2);
        }
    }
    if (target == "#Line3") {
        line = 3;
        if (circuitLine3 == 1) {
            loadCheckBox("#Circuit1Line3", line, circuitLine3);
        }
        else if (circuitLine3 == 2) {
            loadCheckBox("#Circuit2Line3", line, circuitLine3);
        }
        else if (circuitLine3 == 3) {
            loadCheckBox("#Circuit3Line3", line, circuitLine3);
        }
        else if (circuitLine3 == 4) {
            loadCheckBox("#Circuit4Line3", line, circuitLine3);
        }
    }
    if (target == "#Circuit1Line1") {
        circuitLine1 = 1;
        loadCheckBox(target, line, circuitLine1);
    }
    if (target == "#Circuit2Line1") {
        circuitLine1 = 2;
        loadCheckBox(target, line, circuitLine1);
    }
    if (target == "#Circuit3Line1") {
        circuitLine1 = 3;
        loadCheckBox(target, line, circuitLine1);
    }
    if (target == "#Circuit4Line1") {
        circuitLine1 = 4;
        loadCheckBox(target, line, circuitLine1);
    }
    if (target == "#Circuit1Line2") {
        circuitLine2 = 1;
        loadCheckBox(target, line, circuitLine2);
    }
    if (target == "#Circuit2Line2") {
        circuitLine2 = 2;
        loadCheckBox(target, line, circuitLine2);
    }
    if (target == "#Circuit3Line2") {
        circuitLine2 = 3;
        loadCheckBox(target, line, circuitLine2);
    }
    if (target == "#Circuit4Line2") {
        circuitLine2 = 4;
        loadCheckBox(target, line, circuitLine2);
    }
    if (target == "#Circuit1Line3") {
        circuitLine3 = 1;
        loadCheckBox(target, line, circuitLine3);
    }
    if (target == "#Circuit2Line3") {
        circuitLine3 = 2;
        loadCheckBox(target, line, circuitLine3);
    }
    if (target == "#Circuit3Line3") {
        circuitLine3 = 3;
        loadCheckBox(target, line, circuitLine3);
    }
    if (target == "#Circuit4Line3") {
        circuitLine3 = 4;
        loadCheckBox(target, line, circuitLine3);
    }
});

function loadCheckBox(idCircuit, lineNumber, circuitLineNumber) {
    $(idCircuit).empty();
    var idBox = "listDevice" + lineNumber + circuitLineNumber;
    $.ajax({
        url: getUrlBaseReportAjax(398, 1107) + "?line=" + lineNumber + "&circuit=" + circuitLineNumber,
        dataType: "json"
    })
    .done(function(dataJson) {
        $(idCircuit).append($('<div class="box box-body vertical-align" id="' + idBox + '">'));
        $.each(dataJson, function(index, value) {
            var va = new AmCharts.ValueAxis();
            var g = new AmCharts.AmGraph();
            var checkChecked = $.inArray(dataJson[index].id, checkDevice);
            if (checkChecked != -1) {
                $('#' + idBox).append($('<div class="icheck col-xs-1 col-sm-1 col-md-1 col-lg-1">')
                                                .append($('<label> <input id="' + dataJson[index].id + '" type="checkbox" class="minimal" checked> ' + dataJson[index].alias.split('.')[0] + '</label>'))
                                            );
            }
            else {
                $('#' + idBox).append($('<div class="icheck col-xs-1 col-sm-1 col-md-1 col-lg-1">')
                                                .append($('<label> <input id="' + dataJson[index].id + '" type="checkbox" class="minimal"> ' + dataJson[index].alias.split('.')[0] + '</label>'))
                                            );
            }
            $('#' + dataJson[index].id).iCheck({
                checkboxClass: 'icheckbox_square-blue',
                increaseArea: '20%'
            }).on('ifChecked', function () {
                checkDevice.push(dataJson[index].id);
                loadChart("graph", checkDevice, period, dateStart, dateEnd);
            }).on('ifUnchecked', function () {
                checkDevice.splice(checkDevice.indexOf(dataJson[index].id), 1);
                loadChart("graph", checkDevice, period, dateStart, dateEnd);
            });
        });
    });
}

function find(arr, val) {
    for (var i1 = 0; i1 < arr.length; i1++) {
        if (arr[i1].dt === val) {
            return i1;
        }
    }
    return -1;
}

function loadChart(graph, checkDeviceTemp, period, dateStart, dateEnd) {
    $.notifyClose();
    dateStart = $daterange.data('daterangepicker').startDate.format('YYYY-MM-DD');
    dateEnd = $daterange.data('daterangepicker').endDate.format('YYYY-MM-DD');
    $.ajax({
        url: getUrlBaseReportAjax(398, 1113) + "?idDevice=" + checkDeviceTemp.toString() + "&period=" + period + "&db=" + dateStart + "&de=" + dateEnd,
        dataType: "json"
    })
    .done(function(dataJson) {
        chartData = dataJson;
        chart = AmCharts.makeChart (graph, {
            "type": "serial",
            "theme": "light",
            "legend": {
                "useGraphSettings": true
            },
            "dataProvider": chartData,
            "categoryField": "dt",
            "graphs": [],
            "valueAxes": [],
            "mouseWheelZoomEnabled": true,
            "categoryAxis": {
                "labelRotation": 90,
                "axisColor": "#DADADA",
                "minorGridEnabled": true
            },
            "chartScrollbar": {},
            "chartCursor": {
                "cursorPosition": "mouse"
            },
            "export": {
                "enabled": true,
                "position": "bottom-left"
            }
        });
        for (var i = 0; i < checkDeviceTemp.length; i++) {
            let j = i;
            $.ajax({
                url: getUrlBaseReportAjax(398, 1108) + "?idDevice=" + checkDeviceTemp[j] + "&period=" + period + "&db=" + dateStart + "&de=" + dateEnd,
                dataType: "json"
            })
            .done(function(dataJsonDevice) {
                if (dataJsonDevice == "") {
                    window.ajaxNotify = window.notifyWarning("Внимание! Отсутствуют показатели датчика за выбраный пероид времени. Пожалуйста, выберите другой период");
                }
                else {
                    let va = new AmCharts.ValueAxis();
                    let g = new AmCharts.AmGraph();
                    var offsets = {
                        left: -75,
                        right: 0
                    };
                    var position = Math.random() * 10 > 5 ? "left" : "right";
                    var color = '#'+ ('000000' + Math.floor(Math.random()*16777215).toString(16)).slice(-6);
                    var title = dataJsonDevice[0].alias.split('.')[0];
                    for (var i1 = 0; i1 < chart.valueAxes.length; i1++) {
                        offsets[chart.valueAxes[i1].position] += 75;
                    }
                    for (var i1 = 0; i1 < chart.dataProvider.length; i1++) {
                        let d = chart.dataProvider[i1].dt;
                        if (find(dataJsonDevice, d) != -1) {
                            chart.dataProvider[i1]["v" + checkDeviceTemp[j]] = dataJsonDevice[find(dataJsonDevice, d)].value;
                        }
                    }
                    va.id = "v" + checkDeviceTemp[j];
                    va.axisColor = color;
                    va.axisAlpha = 0.5;
                    va.position = position;
                    va.offset = offsets[position];
                    chart.addValueAxis(va);
                    g.valueField = "v" + checkDeviceTemp[j];
                    g.valueAxis = va;
                    g.lineColor = color;
                    g.balloonText = "[[value]]";
                    g.bullet = "round";
                    g.bulletBorderAlpha = 1;
                    g.bulletColor = "#FFFFFF";
                    g.hideBulletsCount = 50;
                    g.useLineColorForBulletBorder = true;
                    g.balloon = {drop: true};
                    g.title = title;
                    g.fillAlphas = 0;
                    chart.addGraph(g);
                }
                
            });
        }
        chart.addListener("dataUpdated", zoomChart);
        zoomChart();
        
        function zoomChart(){
            chart.zoomToIndexes(chart.dataProvider.length - 20, chart.dataProvider.length - 1);
        }
    });
}

$buttonShowModal.on('click', function() {
    dateStart = $daterange.data('daterangepicker').startDate.format('YYYY-MM-DD');
    dateEnd = $daterange.data('daterangepicker').endDate.format('YYYY-MM-DD');
    period = $selectPeriod.val();
    countWindows++;
    var e = document.createElement('div');
    e.setAttribute("id", "dialogWindow" + countWindows);
    e.setAttribute("title", "График №" + countWindows);
    e.innerHTML = '<div id="graphDialog' + countWindows + '" style="height: 100%; width: 100%"></div><div id="graphDialogTemp' + countWindows + '" style="visibility: none"></div>';
    document.getElementById('dialogWindow').append(e);
    listdev[countWindows] = checkDevice.slice();
    listperiod[countWindows] = parseInt(period);
    $.ajax({
        url: getUrlBaseReportAjax(398, 1113) + "?idDevice=" + checkDevice.toString() + "&period=" + period + "&db=" + dateStart + "&de=" + dateEnd,
        dataType: "json"
    })
    .done(function(dataJson) {
        chartDataDialog[countWindows] = dataJson;
        chartDialog[countWindows] = AmCharts.makeChart ("graphDialog" + countWindows, {
            "type": "serial",
            "theme": "light",
            "legend": {
                "useGraphSettings": true
            },
            "dataProvider": chartDataDialog[countWindows],
            "categoryField": "dt",
            "graphs": [],
            "valueAxes": [],
            "mouseWheelZoomEnabled": true,
            "categoryAxis": {
                "labelRotation": 90,
                "axisColor": "#DADADA",
                "minorGridEnabled": true
            },
            "chartScrollbar": {},
            "chartCursor": {
                "cursorPosition": "mouse"
            },
            "export": {
                "enabled": true,
                "position": "bottom-left"
            }
        });
        for (var i = 0; i < checkDevice.length; i++) {
            let j = i;
            $.ajax({
                url: getUrlBaseReportAjax(398, 1108) + "?idDevice=" + checkDevice[j] + "&period=" + period + "&db=" + dateStart + "&de=" + dateEnd,
                dataType: "json"
            })
            .done(function(dataJsonDevice) {
                let va = new AmCharts.ValueAxis();
                let g = new AmCharts.AmGraph();
                var offsets = {
                    left: -75,
                    right: 0
                };
                var position = Math.random() * 10 > 5 ? "left" : "right";
                var color = '#'+ ('000000' + Math.floor(Math.random()*16777215).toString(16)).slice(-6);
                var title = dataJsonDevice[0].alias.split('.')[0];
                for (var i1 = 0; i1 < chartDialog[countWindows].valueAxes.length; i1++) {
                    offsets[chartDialog[countWindows].valueAxes[i1].position] += 75;
                }
                for (var i1 = 0; i1 < chartDialog[countWindows].dataProvider.length; i1++) {
                    let d = chartDialog[countWindows].dataProvider[i1].dt;
                    if (find(dataJsonDevice, d) != -1) {
                        chartDialog[countWindows].dataProvider[i1]["v" + checkDevice[j]] = dataJsonDevice[find(dataJsonDevice, d)].value;
                    }
                }
                va.id = "v" + checkDevice[j];
                va.axisColor = color;
                va.axisAlpha = 0.5;
                va.position = position;
                va.offset = offsets[position];
                chartDialog[countWindows].addValueAxis(va);
                g.valueField = "v" + checkDevice[j];
                g.valueAxis = va;
                g.lineColor = color;
                g.balloonText = "[[value]]";
                g.bullet = "round";
                g.bulletBorderAlpha = 1;
                g.bulletColor = "#FFFFFF";
                g.hideBulletsCount = 50;
                g.useLineColorForBulletBorder = true;
                g.balloon = {drop: true};
                g.title = title;
                g.fillAlphas = 0;
                chartDialog[countWindows].addGraph(g);
            });
        }
        chartDialog[countWindows].addListener("dataUpdated", zoomChartDialog);
        zoomChartDialog();
        
        function zoomChartDialog() {
            chartDialog[countWindows].zoomToIndexes(chartDialog[countWindows].dataProvider.length - 20, chartDialog[countWindows].dataProvider.length - 1);
        }
    });
    $("#dialogWindow"+countWindows).dialog({
        autoOpen: false,
        width: 900,
        height: 570,
        show: {
            effect: "drop",
            duration: 500
        },
        hide: {
            effect: "drop",
            duration: 500
        }
    });
    $("#dialogWindow"+countWindows).dialog("open");
});

function chartRealTime(graph, chartCurrent, checkDeviceTemp, checkPeriod, dateStart, dateEnd) {
    dateStart = $daterange.data('daterangepicker').startDate.format('YYYY-MM-DD');
    dateEnd = $daterange.data('daterangepicker').endDate.format('YYYY-MM-DD');
    period = $selectPeriod.val();
    $.ajax({
        url: getUrlBaseReportAjax(398, 1113) + "?idDevice=" + checkDeviceTemp.toString() + "&period=" + checkPeriod + "&db=" + dateStart + "&de=" + dateEnd,
        dataType: "json"
    })
    .done(function(dataJson) {
        var chartDataTemp = dataJson;
        var chartTemp = AmCharts.makeChart (graph, {
            "type": "serial",
            "dataProvider": chartDataTemp,
            "categoryField": "dt"
        });
        for (var i = 0; i < checkDeviceTemp.length; i++) {
            let j = i;
            $.ajax({
                url: getUrlBaseReportAjax(398, 1108) + "?idDevice=" + checkDeviceTemp[j] + "&period=" + checkPeriod + "&db=" + dateStart + "&de=" + dateEnd,
                dataType: "json"
            })
            .done(function(dataJsonDevice) {
                for (var i1 = 0; i1 < chartTemp.dataProvider.length; i1++) {
                    let d = chartTemp.dataProvider[i1].dt;
                    if (find(dataJsonDevice,d) != -1) {
                        chartTemp.dataProvider[i1]["v" + checkDeviceTemp[j]] = dataJsonDevice[find(dataJsonDevice,d)].value;
                    }
                }
                var chartDataProvider = [];
                var chartTempDataProvider = [];
                $.each(chartCurrent.dataProvider, function( index, value ) {
                    chartDataProvider.push(chartCurrent.dataProvider[index].dt);
                });
                $.each(chartTemp.dataProvider, function( index, value ) {
                    chartTempDataProvider.push(chartTemp.dataProvider[index].dt);
                });
                $.each(chartTempDataProvider, function( index, value ) {
                    var checkRealTime = $.inArray(chartTempDataProvider[index], chartDataProvider);
                    if (checkRealTime == -1) {
                        chartCurrent.dataProvider.push(chartTemp.dataProvider[index]);
                    }
                });
                chartCurrent.validateData();
            });
        }
    });
}

setInterval( function() {
    dateStart = $daterange.data('daterangepicker').startDate.format('YYYY-MM-DD');
    dateEnd = $daterange.data('daterangepicker').endDate.format('YYYY-MM-DD');
    period = $selectPeriod.val();
    if (dateEnd == dateCurrent) {
        chartRealTime("graphTemp", chart, checkDevice, period, dateStart, dateEnd);
        for (var i = 1; i <= countWindows; i++) {
            chartRealTime("graphDialogTemp" + countWindows, chartDialog[i], listdev[i], listperiod[i], dateStart, dateEnd);
        }
    }
    console.log("Perfect");
}, 60000 );